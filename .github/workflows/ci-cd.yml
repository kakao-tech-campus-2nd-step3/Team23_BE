name: CI and CD

on:
  pull_request:
    branches: [ 'Master', 'Develop', 'Weekly/*' ]
  push:
    branches:
      - Master

jobs:
  ci:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - uses: actions/checkout@v4

      # Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      # Set up properties
      - name: Set up properties
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties

      # Gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build and Test
      - name: Test with Gradle Wrapper
        id: gradle-test
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: jeongsan-latest-jar
          path: build/libs/jeongsan-latest.jar

      # Show test result
      - name: Show test result
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Add check comments for failed code lines on test failure
      - name: Add comments for failed code lines
        uses: mikepenz/action-junit-report@v3
        if: failure()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          token: ${{ secrets.GITHUB_TOKEN }}

  cd:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/Master' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Download JAR file
        uses: actions/download-artifact@v4
        with:
          name: jeongsan-latest-jar
          path: build/libs

      - name: Build the Docker image
        run: docker build -t ${{ secrets.ECR_REPOSITORY }} .

      - name: Tag Docker image
        run: docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_REPOSITORY }}:latest
